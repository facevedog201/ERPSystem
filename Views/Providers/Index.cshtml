@using ERPSystem.Models
@using ERPSystem.ViewModels
@model IEnumerable<ProviderInvoices>

@{
    ViewData["Title"] = "Dashboard de Proveedores";
    var totalFacturado = ViewBag.SalesByMonth as IEnumerable<dynamic>?? new List<dynamic>();
    var totalCobrado = ViewBag.StatusSummary as IEnumerable<dynamic>?? new List<dynamic>();
    var topProviders = ViewBag.TopClients as IEnumerable<dynamic>?? new List<dynamic>();
    var providers = ViewBag.Provider as List<ERPSystem.Models.Provider>?? new List<ERPSystem.Models.Provider>();
    var selectedProviderId = (ViewBag.SelectedClientId as int?) ?? 0;

    // Filtros
    var from = ViewBag.From as DateTime? ?? DateTime.Now.AddMonths(-11);
    var to = ViewBag.To as DateTime? ?? DateTime.Now;
    var nameFilter = ViewBag.Name as string ?? "";

    //var invoices = ViewBag.ProviderInvoices as List<ProviderInvoices> ?? new List<ProviderInvoices>();
    var invoices = (Model?.ToList()) ?? new List<ProviderInvoices>();

    // KPI cards using explicit ViewModel
    var cards = new List<KpiCardViewModel>
    {
        new KpiCardViewModel { Title = "Total facturado", Value = ViewBag.TotalFacturado.ToString("C"), IconClass = "bi bi-currency-dollar", ExtraClass = "" },
        new KpiCardViewModel { Title = "Total cobrado", Value = ViewBag.TotalCobrado.ToString("C"), IconClass = "bi bi-wallet2", ExtraClass = "" },
        new KpiCardViewModel { Title = "Pendiente", Value = ViewBag.TotalPendiente.ToString("C"), IconClass = "bi bi-hourglass-split", ExtraClass = "" },
        new KpiCardViewModel { Title = "Facturas", Value = ViewBag.CountInvoices.ToString(), IconClass = "bi bi-receipt", ExtraClass = "" }
    };
}

<h1>Dashboard de Proveedores</h1>

<div>
    <a asp-action="ProvidersList" class="btn btn-primary position-relative"><i class="bi bi-people me-2"></i>  Ver listado de proveedores</a>
    <a asp-action="InactiveProviders" class="btn btn-primary position-relative"><i class="bi bi-search me-2"></i> Proveedores Inactivos</a>
    <a asp-action="Create" class="btn btn-primary position-relative"><i class="bi bi-add me-2"></i> Nuevo Proveedor</a> 
    <p></p>
</div>

<form method="get" class="row g-2 mb-4">
    <div class="col-md-3">
        <label class="form-label">Desde</label>
        <input type="date" name="from" class="form-control" value="@from.ToString("yyyy-MM-dd")" />
    </div>
    <div class="col-md-3">
        <label class="form-label">Hasta</label>
        <input type="date" name="to" class="form-control" value="@to.ToString("yyyy-MM-dd")" />
    </div>
    <div class="col-md-4">
        <label class="form-label">Proveedor</label>
        <input type="text" name="name" class="form-control" value="@nameFilter" placeholder="Filtrar por nombre" />
    </div>
    <div class="col-md-2 d-flex align-items-end">
        <button class="btn btn-primary"><i class="bi bi-search me-2"></i> Filtrar</button>
    </div>
</form>
<div class="row row-cols-1 row-cols-md-4 g-3 mb-4">
        @foreach (var card in cards)
    {
        @await Html.PartialAsync("_KpiCard", card)
    }
</div>

@section Scripts {
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <script>
            const salesLabels = [@string.Join(",", totalFacturado.Select(s => $"'{System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(s.Month)} {s.Year}'"))];
            const salesData = [@string.Join(",", totalFacturado.Select(s => s.Total))];
            new Chart(document.getElementById('salesChart'), { type: 'bar', data: { labels: salesLabels, datasets: [{ label: 'Facturas', data: salesData }] }, options: { responsive: true } });

            const statusLabels = [@string.Join(",", totalCobrado.Select(s => $"'{s.Status}'"))];
            const statusData = [@string.Join(",", totalCobrado.Select(s => s.Count))];
            new Chart(document.getElementById('statusChart'), { type: 'doughnut', data: { labels: statusLabels, datasets: [{ data: statusData }] }, options: { responsive: true } });

            const topProvidersLabels = [@string.Join(",", topProviders.Select(p => $"'{p.Provider}'"))];
            const topProvidersData = [@string.Join(",", topProviders.Select(p => p.Total))];
            new Chart(document.getElementById('providersChart'), { type: 'bar', data: { labels: topProvidersLabels, datasets: [{ label: 'Total', data: topProvidersData }] }, options: { indexAxis: 'y', responsive: true } });
        </script>
}
    
