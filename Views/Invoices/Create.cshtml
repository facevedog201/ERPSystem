@model ERPSystem.Models.Invoice
@{
    ViewData["Title"] = "Crear Factura";
}

<h2 class="mb-4">Crear Factura</h2>

<form asp-action="Create" method="post">
    @Html.AntiForgeryToken()

    <div class="mb-3">
        <label asp-for="ClientId" class="form-label fw-bold">Cliente</label>
        <select id="ClientId" name="ClientId" class="form-select" style="width:100%;"></select>
        <span asp-validation-for="ClientId" class="text-danger"></span>
    </div>

    <!-- Campos adicionales -->
    <div class="row mb-3">
        <div class="col-md-4">
            <label asp-for="Type" class="form-label fw-bold">Tipo de Factura</label>
            <select asp-for="Type" class="form-select">
                <option value="0">Crédito</option>
                <option value="1">Contado</option>
            </select>
        </div>

        <div class="col-md-4">
            <label asp-for="Reference" class="form-label fw-bold">Referencia / N° Orden</label>
            <input asp-for="Reference" class="form-control" placeholder="Ejemplo: Orden #123" />
        </div>

        <div class="col-md-4">
            <label asp-for="ExchangeRate" class="form-label fw-bold">Tasa de Cambio</label>
            <input asp-for="ExchangeRate" type="number" step="0.0001" class="form-control" value="1.00" />
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-4">
            <label asp-for="CIF" class="form-label fw-bold">CIF (Costo, Seguro y Flete)</label>
            <input asp-for="CIF" type="number" step="0.01" class="form-control text-end" placeholder="Ejemplo: 150.00" />
            <span asp-validation-for="CIF" class="text-danger"></span>
        </div>
    </div>

    <div class="mb-3">
        <label asp-for="Shipping" class="form-label fw-bold">Dirección de envío</label>
        <input asp-for="Shipping" class="form-control" placeholder="Ejemplo: Managua, Nicaragua" />
    </div>

    <div class="mb-3">
        <label asp-for="Observations" class="form-label fw-bold">Observaciones</label>
        <textarea asp-for="Observations" class="form-control" rows="3" placeholder="Notas adicionales..."></textarea>
    </div>

    <div class="mb-3">
        <label class="form-label fw-bold">Agregar Servicio</label>
        <div class="input-group mb-2">
            <select id="serviceDropdown" class="form-select" style="width:100%;"></select>
            <button type="button" class="btn btn-primary" id="addServiceBtn">Agregar</button>
        </div>
    </div>

    <div class="table-responsive mb-3">
        <table class="table table-striped table-bordered" id="invoiceServicesTable">
            <thead class="table-dark">
                <tr>
                    <th>Servicio</th>
                    <th>Precio</th>
                    <th>Cantidad</th>
                    <th>Total</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>

    <div class="mb-3 d-flex justify-content-between align-items-center">
        <span class="fw-bold fs-5">Total: <span id="invoiceTotal">0.00</span></span>
    </div>

    <h4 class="mt-4 mb-3">Resumen de Factura</h4>
    <div class="row">
        <div class="col-md-4 mb-3">
            <label asp-for="InvoiceDate" class="form-label fw-bold">Fecha de Factura</label>
            <input asp-for="InvoiceDate" class="form-control" disabled />
        </div>
        <div class="col-md-4 mb-3">
            <label asp-for="CreatedAt" class="form-label fw-bold">Fecha de Creación</label>
            <input asp-for="CreatedAt" class="form-control" disabled />
        </div>
        <div class="col-md-4 mb-3">
            <label asp-for="SubTotal" class="form-label fw-bold">Subtotal (C$)</label>
            <input asp-for="SubTotal" class="form-control text-end" disabled id="subTotalField" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-4 mb-3">
            <label asp-for="TaxAmount" class="form-label fw-bold">IVA (C$)</label>
            <input asp-for="TaxAmount" class="form-control text-end" disabled id="taxAmountField" />
        </div>
        <div class="col-md-4 mb-3">
            <label asp-for="Total" class="form-label fw-bold">Total (C$)</label>
            <input asp-for="Total" class="form-control text-end fw-bold" disabled id="totalAmountField" />
        </div>
        <div class="col-md-12 mb-3">
            <label asp-for="AmountInWords" class="form-label fw-bold">Monto en Letras</label>
            <textarea asp-for="AmountInWords" class="form-control" rows="2" disabled id="amountInWordsField"></textarea>
        </div>
    </div>

    <button type="submit" class="btn btn-success me-2">Guardar Factura</button>
    <a class="btn btn-danger me-2" asp-controller="Reports" asp-action="Index">
        <i class="bi bi-x-circle"></i> Cancelar
    </a>
</form>

@section Scripts {
    <script>
        $(function () {

            let selectedService = null; // Guarda el servicio seleccionado

            // --- CLIENTES ---
            $('#ClientId').select2({
                theme: 'bootstrap-5',
                width: '100%',
                placeholder: 'Buscar cliente...',
                minimumInputLength: 1,
                allowClear: true,
                ajax: {
                    url: '/Clients/Search',
                    dataType: 'json',
                    delay: 250,
                    data: params => ({ query: params.term }),
                    processResults: data => ({ results: data })
                },
                language: {
                    inputTooShort: () => 'Escribe al menos una letra...',
                    searching: () => 'Buscando...',
                    noResults: () => 'Sin resultados'
                }
            });

            // --- SERVICIOS ---
            $('#serviceDropdown').select2({
                theme: 'bootstrap-5',
                width: '100%',
                placeholder: 'Buscar servicio...',
                minimumInputLength: 1,
                allowClear: true,
                ajax: {
                    url: '/Services/Search',
                    dataType: 'json',
                    delay: 250,
                    data: params => ({ query: params.term }),
                    processResults: data => ({ results: data })
                },
                language: {
                    inputTooShort: () => 'Escribe al menos una letra...',
                    searching: () => 'Buscando...',
                    noResults: () => 'Sin resultados'
                }
            });

            // Guardar el servicio seleccionado al hacer clic en un resultado
            $('#serviceDropdown').on('select2:select', function (e) {
                selectedService = e.params.data;
            });

            // --- LÓGICA DE AGREGAR SERVICIO ---
            const servicesTableBody = document.querySelector('#invoiceServicesTable tbody');
            const addBtn = document.getElementById('addServiceBtn');

            function formatNumber(n) { return (n || 0).toFixed(2); }

            function reindexRows() {
                const rows = servicesTableBody.querySelectorAll('tr');
                rows.forEach((tr, idx) => {
                    tr.dataset.index = idx;
                    tr.querySelectorAll('[data-field]').forEach(el => {
                        const field = el.getAttribute('data-field');
                        el.name = `details[${idx}].${field}`;
                    });
                });
            }

            function updateTotal() {
                let subtotal = 0, iva = 0;

                servicesTableBody.querySelectorAll('tr').forEach(tr => {
                    const price = parseFloat(tr.querySelector('[data-field="Price"]').value) || 0;
                    const qty = parseInt(tr.querySelector('[data-field="Quantity"]').value) || 0;
                    const hasIva = tr.querySelector('[data-field="HasIVA"]').value === "true";
                    const rowSub = price * qty;
                    const rowIva = hasIva ? rowSub * 0.15 : 0;
                    subtotal += rowSub;
                    iva += rowIva;
                    tr.querySelector('.totalCell').textContent = formatNumber(rowSub + rowIva);
                });

                const total = subtotal + iva;
                $('#subTotalField').val(formatNumber(subtotal));
                $('#taxAmountField').val(formatNumber(iva));
                $('#totalAmountField').val(formatNumber(total));
                $('#invoiceTotal').text(formatNumber(total));
                $('#amountInWordsField').val(numberToWords(total));
            }

            function numberToWords(num) {
                if (isNaN(num)) return "";
                const units = ["", "uno", "dos", "tres", "cuatro", "cinco", "seis", "siete", "ocho", "nueve", "diez",
                    "once", "doce", "trece", "catorce", "quince", "dieciséis", "diecisiete", "dieciocho", "diecinueve"];
                const tens = ["", "", "veinte", "treinta", "cuarenta", "cincuenta", "sesenta", "setenta", "ochenta", "noventa"];
                const hundreds = ["", "ciento", "doscientos", "trescientos", "cuatrocientos", "quinientos",
                    "seiscientos", "setecientos", "ochocientos", "novecientos"];
                function toWords(n) {
                    n = Math.floor(n);
                    if (n === 0) return "cero";
                    if (n < 20) return units[n];
                    if (n < 100) {
                        if (n % 10 === 0) return tens[n / 10];
                        if (n < 30) return "veinti" + units[n % 10];
                        return tens[Math.floor(n / 10)] + " y " + units[n % 10];
                    }
                    if (n < 1000) {
                        if (n === 100) return "cien";
                        return hundreds[Math.floor(n / 100)] + (n % 100 > 0 ? " " + toWords(n % 100) : "");
                    }
                    if (n < 1000000) {
                        if (n < 2000) return "mil " + toWords(n % 1000);
                        return toWords(Math.floor(n / 1000)) + " mil " + (n % 1000 > 0 ? toWords(n % 1000) : "");
                    }
                    if (n < 2000000) return "un millón " + toWords(n % 1000000);
                    if (n < 1000000000000) return toWords(Math.floor(n / 1000000)) + " millones " + toWords(n % 1000000);
                    return n.toString();
                }
                const integerPart = Math.floor(num);
                const decimalPart = Math.round((num - integerPart) * 100);
                const words = toWords(integerPart);
                const centavos = decimalPart > 0 ? ` con ${toWords(decimalPart)} centavos` : " con cero centavos";
                return words.charAt(0).toUpperCase() + words.slice(1) + " córdobas" + centavos;
            }

            // --- Evento del botón AGREGAR ---
            addBtn.addEventListener('click', () => {
                if (!selectedService) {
                    alert('Seleccione un servicio antes de agregar.');
                    return;
                }

                const serviceId = selectedService.id;
                const serviceName = selectedService.text;
                const price = parseFloat(selectedService.price || 0);
                const hasIva = selectedService.hasiva === true || selectedService.hasiva === "true";

                if (servicesTableBody.querySelector(`#row-${serviceId}`)) {
                    alert('Este servicio ya está agregado.');
                    return;
                }

                const row = document.createElement('tr');
                row.id = 'row-' + serviceId;
                row.innerHTML = `
                    <td>${serviceName}<input type="hidden" data-field="ServiceId" value="${serviceId}" /></td>
                    <td>${formatNumber(price)}<input type="hidden" data-field="Price" value="${price}" /></td>
                    <td><input type="number" data-field="Quantity" value="1" min="1" class="form-control" /></td>
                    <td class="totalCell">${formatNumber(price)}</td>
                    <td><input type="hidden" data-field="HasIVA" value="${hasIva}" />
                        <button type="button" class="btn btn-danger btn-sm btn-remove">Eliminar</button></td>`;
                servicesTableBody.appendChild(row);
                reindexRows();
                updateTotal();
            });

            // Eliminar servicio
            servicesTableBody.addEventListener('click', (e) => {
                if (e.target.classList.contains('btn-remove')) {
                    e.target.closest('tr').remove();
                    reindexRows();
                    updateTotal();
                }
            });

            // Actualizar totales al cambiar cantidad
            servicesTableBody.addEventListener('input', (e) => {
                if (e.target.getAttribute('data-field') === 'Quantity') {
                    let qty = parseInt(e.target.value) || 1;
                    if (qty < 1) qty = 1;
                    e.target.value = qty;
                    updateTotal();
                }
            });

        });
    </script>
}
