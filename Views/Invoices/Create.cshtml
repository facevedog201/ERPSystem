@model ERPSystem.Models.Invoice
@{
    ViewData["Title"] = "Crear Factura";
}

<h2 class="mb-4">Crear Factura</h2>

<form asp-action="Create" method="post">
    <div class="mb-3">
        <label asp-for="ClientId" class="form-label fw-bold">Cliente</label>
        @Html.DropDownListFor(
        m => m.ClientId,
                new SelectList(ViewBag.Clients, "ClientId", "Name"),
                "-- Seleccione un cliente --",
                new { @class = "form-select" }
                )
        <span asp-validation-for="ClientId" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label class="form-label fw-bold">Agregar Servicio</label>
        <div class="input-group mb-2">
            <select id="serviceDropdown" class="form-select">
                <option value="">-- Selecciona un servicio --</option>
                @foreach (var s in ViewBag.Services)
                {
                    <option value="@s.ServiceId"
                            data-price="@s.Price"
                            data-HasIVA="@s.HasIVA.ToString().ToLower()">
                        @s.Name @(s.HasIVA ? "(con IVA)" : "(sin IVA)")
                    </option>
                }
            </select>
            <button type="button" class="btn btn-primary" id="addServiceBtn">Agregar</button>
        </div>
    </div>

    <div class="table-responsive mb-3">
        <table class="table table-striped table-bordered" id="invoiceServicesTable">
            <thead class="table-dark">
                <tr>
                    <th>Servicio</th>
                    <th>Precio</th>
                    <th>Cantidad</th>
                    <th>Total</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                <!-- Filas se agregan dinámicamente -->
            </tbody>
        </table>
    </div>

    <div class="mb-3 d-flex justify-content-between align-items-center">
        <span class="fw-bold fs-5">Total: <span id="invoiceTotal">0.00</span></span>
    </div>
    <button type="submit" class="btn btn-success me-2">Guardar Factura</button>
    <a class="btn btn-danger me-2" asp-controller="Reports" asp-action="Index">
        <i class="bi bi-file-earmark-plus"></i> Cancelar
    </a>
</form>

@section Scripts {
    <script>
        const servicesTableBody = document.getElementById('invoiceServicesTable').querySelector('tbody');
        const addBtn = document.getElementById('addServiceBtn');
        const dropdown = document.getElementById('serviceDropdown');
        const invoiceTotal = document.getElementById('invoiceTotal');

        function formatNumber(n) { return (n || 0).toFixed(2); }

        function reindexRows() {
            // Reindexa los inputs name para que el model binder los lea correctamente
            const rows = servicesTableBody.querySelectorAll('tr');
            rows.forEach((tr, idx) => {
                tr.dataset.index = idx;
                // actualizar names
                tr.querySelectorAll('[data-field]').forEach(el => {
                    const field = el.getAttribute('data-field'); // ServiceId, Quantity, Price, HasIVA
                    if (field === 'ServiceId' || field === 'Price' || field === 'HasIVA') {
                        el.name = `details[${idx}].${field}`;
                    } else if (field === 'Quantity') {
                        el.name = `details[${idx}].${field}`;
                    }
                });
            });
        }

        function updateTotal() {
            let total = 0;
            servicesTableBody.querySelectorAll('tr').forEach(tr => {
                const price = parseFloat(tr.querySelector('[data-field="Price"]').value) || 0;
                const qty = parseInt(tr.querySelector('[data-field="Quantity"]').value) || 0;
                const hasIva = tr.querySelector('[data-field="HasIVA"]').value === "true";
                const subtotal = price * qty;
                const iva = hasIva ? subtotal * 0.15 : 0;
                total += subtotal + iva;
                // actualizar celda total
                const totalCell = tr.querySelector('.totalCell');
                if (totalCell) totalCell.textContent = formatNumber(subtotal + iva);
            });
            invoiceTotal.textContent = formatNumber(total);
        }

        addBtn.addEventListener('click', () => {
            const selectedOption = dropdown.options[dropdown.selectedIndex];
            if (!selectedOption || !selectedOption.value) return;

            const serviceId = selectedOption.value;
            const serviceName = selectedOption.text;
            const price = parseFloat(selectedOption.dataset.price) || 0;
            const hasIva = (selectedOption.dataset.hasiva === "true");

            // evitar duplicados: si ya existe la fila no la agregamos
            if (servicesTableBody.querySelector(`#row-${serviceId}`)) return;

            const row = document.createElement('tr');
            row.id = 'row-' + serviceId;

            // usamos inputs con data-field para poder reindexar después
            row.innerHTML = `
                <td>
                    ${serviceName}
                    <input type="hidden" data-field="ServiceId" value="${serviceId}" />
                </td>
                <td>
                    ${formatNumber(price)}
                    <input type="hidden" data-field="Price" value="${price}" />
                </td>
                <td>
                    <input type="number" data-field="Quantity" value="1" min="1" class="form-control" />
                </td>
                <td class="totalCell">${formatNumber(price)}</td>
                <td>
                    <input type="hidden" data-field="HasIVA" value="${hasIva}" />
                    <button type="button" class="btn btn-danger btn-sm btn-remove">Eliminar</button>
                </td>
            `;

            servicesTableBody.appendChild(row);
            reindexRows();
            updateTotal();
        });

        // Delegación para botones eliminar y cambios en cantidades
        servicesTableBody.addEventListener('click', function (e) {
            if (e.target && e.target.classList.contains('btn-remove')) {
                const tr = e.target.closest('tr');
                if (tr) tr.remove();
                reindexRows();
                updateTotal();
            }
        });

        servicesTableBody.addEventListener('input', function (e) {
            if (e.target && e.target.getAttribute('data-field') === 'Quantity') {
                let qty = parseInt(e.target.value) || 1;
                if (qty < 1) qty = 1;
                e.target.value = qty;
                updateTotal();
            }
        });

        // DEBUG helper (opcional): imprime el form data antes de submit
        // Puedes activar para verificar que los fields llegan correctamente
        /*
        document.querySelector('form[asp-action="Create"]').addEventListener('submit', function (ev) {
            const fd = new FormData(this);
            for (let pair of fd.entries()) {
                console.log(pair[0]+ ': ' + pair[1]);
            }
        });
        */

    </script>
}
